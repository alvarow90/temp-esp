

#include <ESP8266WiFi.h>       // Conexion del NodeMCU a la red Wifi Local
#include <WiFiClient.h>        // Configurar del NodeMCU del cliente
#include <ESP8266HTTPClient.h> //Funciones enviar request POST o GET  Cliente
#if defined(ESP32)


//Librerias necesarias 
#include <WiFi.h>



#elif defined(ESP8266)
#include <FirebaseESP8266.h>
#include <iostream> //Libreria c++
#include <string>
#endif

#define FIREBASE_HOST " fresado-4a5be-default-rtdb.firebaseio.com/"
#define FIREBASE_AUTH "cW5Hrzn6EzOnpGRr4wJpcIzwN61iaEGKz6VDliTv"

// Proporciona la informacion del proceso de generación del token 
#include <addons/TokenHelper.h>

// Proporcione la información de impresión de la carga útil de RTDB y otras funciones auxiliares.
#include <addons/RTDBHelper.h>



//  Definir las credenciales del  WiFi
#define WIFI_SSID "Álvaro's Galaxy S20 FE"
#define WIFI_PASSWORD "XXXXXX"



// Definir Clave API 
#define API_KEY "AIzaSyBESmlprLU-fqcwH1YnJahm2yJNG8IFJqk"

// Definir la URL DE RTDB */
#define DATABASE_URL "esp8266-XXXX-default-rtdb.firebaseio.com/" 

/* 4. Define the user Email and password that alreadey registerd or added in your project */
#define USER_EMAIL "alvaro@gmail.com"
#define USER_PASSWORD "123456"

// Define Firebase Data object
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

// Sensor Analogo
int sensorValue1 = 0;
int sensorValue3 = 0;

unsigned int sensorValue2 = 0;

void setup()
{
  
  Serial.begin(115200); // Inicializamos el serial
  delay(10);            // Retraso para que se reincie el serial
   WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connectando a WIFI");
    
    
    while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(300);
  }



  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  Serial.printf("Firebase Client v%s\n\n", FIREBASE_CLIENT_VERSION);

  // Asigne la clave api (OBLIGATORIO)
  config.api_key = API_KEY;

  //Asignar credenciales de incio de sesion del usuario 
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  // Asignar la URL de RTDB (OBLIGATORIO)
  config.database_url = DATABASE_URL;

  // Asignar la funcion de devolucion de llamada para la tarea de generación de tokens de ejecucion prolongada
  config.token_status_callback = tokenStatusCallback; // see addons/TokenHelper.h
  Firebase.begin(&config, &auth);

  
  
  // Comente o pase un valor falso cuando la reconexión WiFi controlará su código o la biblioteca de terceros
  Firebase.reconnectWiFi(true);

  Firebase.setDoubleDigits(5);

  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
}

void loop()
{

  float vref = 3.3;
  float resolution = vref / 1023;
   sensorValue2 = analogRead(A0);
   sensorValue2 = (sensorValue2 * resolution) * 100;

  Serial.println(sensorValue2);

  delay(500);

  // Obtener hora fecha y hora en tiempo real 
  String date = __DATE__;
  Serial.println(date);

  Serial.printf("Set float... %s\n", Firebase.setFloat(fbdo, F("/temperatura"), sensorValue2) ? "ok" : fbdo.errorReason().c_str());
  Serial.printf("Set float... %s\n", Firebase.getFloat(fbdo, F("/temperatura")) ? String(fbdo.to<float>()).c_str() : fbdo.errorReason().c_str());

  if (Firebase.ready() && (millis() - sensorValue2 >= 0 || sensorValue2 <= 1024))
  {
    sensorValue2 = analogRead(A0);
  }
}
